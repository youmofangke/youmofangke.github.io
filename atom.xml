<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PcZaiXian</title>
  <subtitle>youmofangke Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://volc1605.github.io/"/>
  <updated>2017-05-05T07:32:19.810Z</updated>
  <id>https://volc1605.github.io/</id>
  
  <author>
    <name>youmofangke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令大全</title>
    <link href="https://volc1605.github.io/2017/05/05/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://volc1605.github.io/2017/05/05/git命令大全/</id>
    <published>2017-05-05T07:08:32.000Z</published>
    <updated>2017-05-05T07:32:19.810Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</div><div class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</div><div class="line">git config --global color.ui true                         # git status等命令自动着色</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</div><div class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</div><div class="line">git status                                                # 查看当前版本状态（是否修改）</div><div class="line">git add xyz                                               # 添加xyz文件至index</div><div class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</div><div class="line">git commit -m &apos;xxx&apos;                                       # 提交</div><div class="line">git commit --amend -m &apos;xxx&apos;                               # 合并上一次提交（用于反复修改）</div><div class="line">git commit -am &apos;xxx&apos;                                      # 将add和commit合为一步</div><div class="line">git rm xxx                                                # 删除index中的文件</div><div class="line">git rm -r *                                               # 递归删除</div><div class="line">git log                                                   # 显示提交日志</div><div class="line">git log -1                                                # 显示1行日志 -n为n行</div><div class="line">git log -5</div><div class="line">git log --stat                                            # 显示提交日志及相关变动文件</div><div class="line">git log -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</div><div class="line">git show dfb02                                            # 可只用commitid的前几位</div><div class="line">git show HEAD                                             # 显示HEAD提交日志</div><div class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div><div class="line">git tag                                                   # 显示已存在的tag</div><div class="line">git tag -a v2.0 -m &apos;xxx&apos;                                  # 增加v2.0的tag</div><div class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</div><div class="line">git log v2.0                                              # 显示v2.0的日志</div><div class="line">git diff                                                  # 显示所有未添加至index的变更</div><div class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</div><div class="line">git diff HEAD^                                            # 比较与上一个版本的差异</div><div class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</div><div class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</div><div class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div><div class="line">git branch                                                # 显示本地分支</div><div class="line">git branch --contains 50089                               # 显示包含提交50089的分支</div><div class="line">git branch -a                                             # 显示所有分支</div><div class="line">git branch -r                                             # 显示所有原创分支</div><div class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</div><div class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</div><div class="line">git branch -m master master_copy                          # 本地分支改名</div><div class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</div><div class="line">git checkout -b master master_copy                        # 上面的完整版</div><div class="line">git checkout features/performance                         # 检出已存在的features/performance分支</div><div class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div><div class="line">git checkout v2.0                                         # 检出版本v2.0</div><div class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</div><div class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</div><div class="line">git merge origin/master                                   # 合并远程master分支至当前分支</div><div class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</div><div class="line">git push origin master                                    # 将当前分支push到远程master分支</div><div class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</div><div class="line">git push --tags                                           # 把所有tag推送到远程仓库</div><div class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</div><div class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</div><div class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</div><div class="line">git mv README README2                                     # 重命名文件README为README2</div><div class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div><div class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</div><div class="line">git ls-files                                              # 列出git index包含的文件</div><div class="line">git show-branch                                           # 图示当前分支历史</div><div class="line">git show-branch --all                                     # 图示所有分支历史</div><div class="line">git whatchanged                                           # 显示提交历史对应的文件修改</div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div><div class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</div><div class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</div><div class="line">git reflog                                                # 显示所有提交，包括孤立节点</div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</div><div class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</div><div class="line">git stash list                                            # 查看所有暂存</div><div class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</div><div class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</div><div class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</div><div class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oracle高版本导入低版本数据</title>
    <link href="https://volc1605.github.io/2017/05/05/Oracle%E9%AB%98%E7%89%88%E6%9C%AC%E5%AF%BC%E5%85%A5%E4%BD%8E%E7%89%88%E6%9C%AC%E6%95%B0%E6%8D%AE/"/>
    <id>https://volc1605.github.io/2017/05/05/Oracle高版本导入低版本数据/</id>
    <published>2017-05-05T06:58:37.798Z</published>
    <updated>2017-05-05T06:58:37.813Z</updated>
    
    <content type="html"><![CDATA[<p>1.创建一个数据存储操作目录</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2981616-6fd455d370a45688.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>2.system登录(登录方式用sqlplus与第三发工具都行)执行如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create directory expdp_dir as &apos;E:\oralce_backup\&apos;;</div></pre></td></tr></table></figure></p>
<p>3.给予数据库用户操作directory文件夹的读写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant read,write on directory expdp_dir to QIMS36SYS; //QIMS36SYS是数据库其中的用户名</div></pre></td></tr></table></figure></p>
<p>4.获取低版本的oracle版本号(只列出了一种方法)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from v$version;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2981616-43dd4ffe8a129fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>4.进入CMD窗口 直接输入 导出数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expdp SYSTEM/SYSTEM@QIMS36 directory=expdp_dir dumpfile =QIMS36SYS.dmp schemas=QIMS36SYS logfile=11.log version=10.2.0.4.0</div></pre></td></tr></table></figure></p>
<p>5.操作低版本数据库 重复1-3步骤<br>6.进入CMD窗口 直接输入 导入数据到低版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">impdp userid=&apos;SYSTEM/SYSTEM@QIMS36 as sysdba&apos; schemas=QIMS36SYS directory=expdp_dir dumpfile =QIMS36SYS.dmp  logfile=imp1.log</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.创建一个数据存储操作目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2981616-6fd455d370a45688.png?imageMogr2/auto-orient/strip%7
    
    </summary>
    
      <category term="数据库" scheme="https://volc1605.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="https://volc1605.github.io/tags/Oracle/"/>
    
      <category term="数据库" scheme="https://volc1605.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 卸载 不干净 彻底删除</title>
    <link href="https://volc1605.github.io/2017/05/05/Oracle%E5%8D%B8%E8%BD%BD%E4%B8%8D%E5%B9%B2%E5%87%80/"/>
    <id>https://volc1605.github.io/2017/05/05/Oracle卸载不干净/</id>
    <published>2017-05-05T06:58:37.782Z</published>
    <updated>2017-05-05T06:58:37.798Z</updated>
    
    <content type="html"><![CDATA[<p>①关闭oracle相关的服务<br>②注册表删除(可能因为oracle及windows的版本不同注册表信息也有<strong>些差异</strong>):<br>③开始è输入regedit打开注册表编辑器删除下面的目录<br><code>HKEY_CLASSES_ROOT</code>目录下所有以<code>Ora</code>、<code>Oracle</code>、<code>Orcl</code>或<code>EnumOra</code>为前缀的键。<br><code>HKEY_CURRENT_USER/SOFTWARE/Microsoft/windows/CurrentVersion/Explorer/MenuOrder/Start Menu/Programs</code>中所有以<code>oracle</code> 开头的键。<br><code>HKEY_LOCAL_MACHINE\SOFTWARE</code>中以<code>oracle</code>字样开头的文件<br><code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\ Services</code>中以<code>oracle</code>字样开头的文件<br><code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\ Services</code>中以<code>oracle</code> 字样开头的文件<br><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code>中以<code>oracle</code> 字样开头的文件<br><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application</code>中以<code>oracle</code>字样开头的文件<br><code>HKDY_LOCAL_MACHINE/SOFTWARE/ODBC/ODBCINST.INI</code>中除<code>Microsoft ODBC for Oracle</code>注册表键以外的所有含有<code>Oracle</code>的键。<br>④删除环境变量path中关于oracle的内容,鼠标右键右单击”我的电脑属性高级环境变量PATH 变量(删除之前最好先备份一份到文本中)<br>删除环境变量中的<code>PATHT CLASSPATH</code>中包含Oracle的值。<br>删除“开始”/“程序”中所有Oracle的组和图标。<br>删除所有与Oracle相关的目录，包括：（1）、c:\Program file\Oracle目录。 （2）、ORACLE_BASE目录。（3）、c:\Documents and Settings\系统用户名、LocalSettings\Temp目录下的临时文件<br>⑤重启电脑将<code>C:\Program Files (x86)\Oracle</code>, C:\Program Files\Oracle与 C:\app (此为oracle安装目录)及其子文件等oracle安装目录文件全部删除<br>到此oracle就删除了,如果还是不行==&gt;重新装系统了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;①关闭oracle相关的服务&lt;br&gt;②注册表删除(可能因为oracle及windows的版本不同注册表信息也有&lt;strong&gt;些差异&lt;/strong&gt;):&lt;br&gt;③开始è输入regedit打开注册表编辑器删除下面的目录&lt;br&gt;&lt;code&gt;HKEY_CLASSES_ROOT&lt;
    
    </summary>
    
      <category term="数据库" scheme="https://volc1605.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="https://volc1605.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo &amp; Github 搭建个人博客 记录</title>
    <link href="https://volc1605.github.io/2017/05/04/Hexo-Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E8%AE%B0%E5%BD%95/"/>
    <id>https://volc1605.github.io/2017/05/04/Hexo-Github-搭建个人博客-记录/</id>
    <published>2017-05-04T11:57:07.000Z</published>
    <updated>2017-05-05T06:58:37.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo?"></a>什么是hexo?</h1><p>hexo 是博客框架，将支持的类型的文件转换成静态Web页面(html+css+JavaScript).</p>
<h1 id="什么是-nmp"><a href="#什么是-nmp" class="headerlink" title="什么是 nmp?"></a>什么是 nmp?</h1><p>表示 Node.js 的开放式模块登记和管理系统: npmjs.org<br>表示 Node.js 默认的模块管理器, 可用于下载、安装和管理 Node 模块<br>注:npm随node安装无需其他操作</p>
<h1 id="hexo环境搭建-Windows"><a href="#hexo环境搭建-Windows" class="headerlink" title="hexo环境搭建(Windows)"></a>hexo环境搭建(Windows)</h1><p>$符号不要复制  </p>
<ol>
<li><p>下载node.js及git并且安装好(默认安装就好了)<br>②如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来打开终端(cmd),只需要使用 npm 即可完成 Hexo 的安装。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set registry https://registry.npm.taobao.org npm info underscore //更改npm源为淘宝,可以加快hexo下载  </div><div class="line">$ npm install -g hexo-cli  //全局安装hexo环境</div></pre></td></tr></table></figure>
</li>
<li><p>在D盘新建个 blog 博客文件夹  </p>
</li>
<li><p>blog文件下右击选择 <code>Git Bash Here</code> 执行如下指令   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init //初始化</div><div class="line">$ npm install </div><div class="line">$ npm install hexo-deployer-git --save //安装  git部署插件</div></pre></td></tr></table></figure>
</li>
<li><p>hexo主题安装(下面安装的是next主题)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
<li><p>测试是否成功部署</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean //清理缓存</div><div class="line">$ hexo g //生成静态网页</div><div class="line">$ hexo s //开启服务</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="localhost:4000" target="_blank" rel="external">浏览器输入http://localhost:4000看是否有界面显示</a>,有就表示部署成功!</p>
<h2 id="GitHub环境设置"><a href="#GitHub环境设置" class="headerlink" title="GitHub环境设置"></a>GitHub环境设置</h2><ol>
<li>注册一个GitHub账号</li>
<li>新建一个仓库(New repository),仓库命名格式必须为<code>GitHub用户名</code>.github.io  </li>
<li>新建仓库时选择公共的(默认是选中的) <code>public</code> </li>
<li>创建好后,进入设置(settings),选择一个主题(Choose a theme)设置完成<h2 id="GitHub与hexo关联"><a href="#GitHub与hexo关联" class="headerlink" title="GitHub与hexo关联"></a>GitHub与hexo关联</h2></li>
<li><p>设置Git的user name和email：(第一次配置的话)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;GitHub用户名&quot;</div><div class="line">$ git config --global user.email &quot;GitHub注册邮箱地址&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>给本地生成SSH-KEY秘钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>验证SSH-KEY秘钥是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com //输入此指令后选择yes,然后一直回车.有access字样表示OK了</div></pre></td></tr></table></figure>
</li>
<li><p>生成的秘钥默认存在<code>C:\Users\Administrator\.ssh</code>中的<code>id_rsa.pub</code>文件中,以记事本打开添加到GitHub中去.(怎么添加自行百度)</p>
</li>
<li>配置Deployment<br>站点配置文件<code>_config.yml</code>(在blog根目录下),打开找到<code>Deployment</code>修改如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git  </div><div class="line">  repository: git@github.com:GitHub用户名/GitHub用户名.github.io.git  </div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="进阶-更换电脑或更换系统下继续更新博客"><a href="#进阶-更换电脑或更换系统下继续更新博客" class="headerlink" title="进阶(更换电脑或更换系统下继续更新博客)"></a>进阶(更换电脑或更换系统下继续更新博客)</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol>
<li>现在已经在一台电脑上搭建好hexo，并且已经部署到github pages，可以成功的发布博客<br>新建分支提交原始文件</li>
<li>初始化<br>在本地博客根目录输入<code>git init</code>，为整个hexo目录初始化git环境</li>
<li><p>添加远程库<br>将本地与github上的仓库建立关联</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:GitHub用户名/GitHub用户名.github.io.git</div></pre></td></tr></table></figure>
</li>
<li><p>新建分支hexo并切换到hexo分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b hexo</div></pre></td></tr></table></figure>
</li>
<li><p>将hexo生成网站原始的文件提交到hexo分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add -A</div><div class="line">$ git commit -m &quot;原始文件&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>将hexo分支推送到远程库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin hexo  //现在已经成功备份到hexo分支</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="换系统或者换电脑之后的hexo数据恢复"><a href="#换系统或者换电脑之后的hexo数据恢复" class="headerlink" title="换系统或者换电脑之后的hexo数据恢复"></a>换系统或者换电脑之后的hexo数据恢复</h3><ol>
<li>配置环境<br>首先在新环境下安装Node 、Git</li>
<li>将本地SSH key添加到github</li>
<li><p>最后不要忘记这两行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;GitHub用户名&quot;</div><div class="line">$ git config --global user.email &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>数据恢复<br>克隆仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/GitHub用户名/GitHub用户名.github.io.git</div></pre></td></tr></table></figure>
</li>
<li><p>切换到hexo分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout hexo</div></pre></td></tr></table></figure>
</li>
<li><p>安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
</li>
<li><p>安装git部署插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git</div></pre></td></tr></table></figure>
</li>
<li><p>不需要hexo init这条指令</p>
</li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
</li>
<li><p>将博客源文件放到<code>hexo</code>分支下,<br>在hexo分支下写好新博客后执行以下操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;源文件&quot;</div><div class="line">$ git push origin hexo</div></pre></td></tr></table></figure>
</li>
<li><p>发布网站到master分支上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://magicroc.com/2017/02/05/%E5%88%A9%E7%94%A8github%E5%88%86%E6%94%AF%E5%A4%9A%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4hexo/" target="_blank" rel="external">原文地址</a></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1></li>
<li><p>如果要将博客源文件上传到`hexo’分支下就必须执行如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;源文件&quot;</div><div class="line">$ git push origin hexo</div></pre></td></tr></table></figure>
</li>
<li><p>如果只是发布则执行如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
</li>
<li><p>可能会出现 failed to push some refs to .. 的错误</p>
<blockquote>
<p>这是因为git仓库中已经有一部分代码，所以它不允许&gt;你直接把你的代码覆盖上去<br>可以使用强推，即利用强覆盖方式用你本地的代码替&gt;&gt;代git仓库内的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -f origin hexo</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<blockquote>
<p>或者先把git的东西fetch到你本地然后merge后再push<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git fetch</div><div class="line">$ git merge</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是hexo&quot;&gt;&lt;a href=&quot;#什么是hexo&quot; class=&quot;headerlink&quot; title=&quot;什么是hexo?&quot;&gt;&lt;/a&gt;什么是hexo?&lt;/h1&gt;&lt;p&gt;hexo 是博客框架，将支持的类型的文件转换成静态Web页面(html+css+JavaScri
    
    </summary>
    
    
      <category term="hexo" scheme="https://volc1605.github.io/tags/hexo/"/>
    
      <category term="GitHub" scheme="https://volc1605.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用语法收录</title>
    <link href="https://volc1605.github.io/2017/04/27/hexo%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95/"/>
    <id>https://volc1605.github.io/2017/04/27/hexo常用语法收录/</id>
    <published>2017-04-27T14:01:18.000Z</published>
    <updated>2017-05-05T06:58:37.813Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
