<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2017%2F05%2F05%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Git常用命令 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。1234Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 一、新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 二、配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 三、增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 四、代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 五、分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 六、标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 七、查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 八、远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 九、撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 十、其他12# 生成一个可供发布的压缩包$ git archive 原文链接:http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html]]></content>
      <categories>
        <category>基石</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令大全]]></title>
    <url>%2F2017%2F05%2F05%2Fgit%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[Git命令行收录,持续更新…1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &apos;xxx&apos; # 提交git commit --amend -m &apos;xxx&apos; # 合并上一次提交（用于反复修改）git commit -am &apos;xxx&apos; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &apos;xxx&apos; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&apos;%h %s&apos; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &apos;#define&apos; --and -e SORT_DIRENTgit gcgit fsck]]></content>
      <categories>
        <category>基石</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle高版本导入低版本数据]]></title>
    <url>%2F2017%2F05%2F05%2FOracle%E9%AB%98%E7%89%88%E6%9C%AC%E5%AF%BC%E5%85%A5%E4%BD%8E%E7%89%88%E6%9C%AC%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[1.创建一个数据存储操作目录 2.system登录(登录方式用sqlplus与第三发工具都行)执行如下代码1create directory expdp_dir as &apos;E:\oralce_backup\&apos;; 3.给予数据库用户操作directory文件夹的读写权限1grant read,write on directory expdp_dir to QIMS36SYS; //QIMS36SYS是数据库其中的用户名 4.获取低版本的oracle版本号(只列出了一种方法)1select * from v$version; 4.进入CMD窗口 直接输入 导出数据1expdp SYSTEM/SYSTEM@QIMS36 directory=expdp_dir dumpfile =QIMS36SYS.dmp schemas=QIMS36SYS logfile=11.log version=10.2.0.4.0 5.操作低版本数据库 重复1-3步骤6.进入CMD窗口 直接输入 导入数据到低版本1impdp userid=&apos;SYSTEM/SYSTEM@QIMS36 as sysdba&apos; schemas=QIMS36SYS directory=expdp_dir dumpfile =QIMS36SYS.dmp logfile=imp1.log]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 卸载 不干净 彻底删除]]></title>
    <url>%2F2017%2F05%2F05%2FOracle%E5%8D%B8%E8%BD%BD%E4%B8%8D%E5%B9%B2%E5%87%80%2F</url>
    <content type="text"><![CDATA[①关闭oracle相关的服务②注册表删除(可能因为oracle及windows的版本不同注册表信息也有些差异):③开始è输入regedit打开注册表编辑器删除下面的目录HKEY_CLASSES_ROOT目录下所有以Ora、Oracle、Orcl或EnumOra为前缀的键。HKEY_CURRENT_USER/SOFTWARE/Microsoft/windows/CurrentVersion/Explorer/MenuOrder/Start Menu/Programs中所有以oracle 开头的键。HKEY_LOCAL_MACHINE\SOFTWARE中以oracle字样开头的文件HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\ Services中以oracle字样开头的文件HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\ Services中以oracle 字样开头的文件HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services中以oracle 字样开头的文件HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application中以oracle字样开头的文件HKDY_LOCAL_MACHINE/SOFTWARE/ODBC/ODBCINST.INI中除Microsoft ODBC for Oracle注册表键以外的所有含有Oracle的键。④删除环境变量path中关于oracle的内容,鼠标右键右单击”我的电脑属性高级环境变量PATH 变量(删除之前最好先备份一份到文本中)删除环境变量中的PATHT CLASSPATH中包含Oracle的值。删除“开始”/“程序”中所有Oracle的组和图标。删除所有与Oracle相关的目录，包括：（1）、c:\Program file\Oracle目录。 （2）、ORACLE_BASE目录。（3）、c:\Documents and Settings\系统用户名、LocalSettings\Temp目录下的临时文件⑤重启电脑将C:\Program Files (x86)\Oracle, C:\Program Files\Oracle与 C:\app (此为oracle安装目录)及其子文件等oracle安装目录文件全部删除到此oracle就删除了,如果还是不行==&gt;重新装系统了]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo & Github 搭建个人博客 记录]]></title>
    <url>%2F2017%2F05%2F04%2FHexo-Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[什么是hexo?hexo 是博客框架，将支持的类型的文件转换成静态Web页面(html+css+JavaScript). 什么是 nmp?表示 Node.js 的开放式模块登记和管理系统: npmjs.org表示 Node.js 默认的模块管理器, 可用于下载、安装和管理 Node 模块注:npm随node安装无需其他操作 hexo环境搭建(Windows)$符号不要复制 下载node.js及git并且安装好(默认安装就好了)②如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来打开终端(cmd),只需要使用 npm 即可完成 Hexo 的安装。 12$ npm config set registry https://registry.npm.taobao.org npm info underscore //更改npm源为淘宝,可以加快hexo下载 $ npm install -g hexo-cli //全局安装hexo环境 在D盘新建个 blog 博客文件夹 blog文件下右击选择 Git Bash Here 执行如下指令 123$ hexo init //初始化$ npm install $ npm install hexo-deployer-git --save //安装 git部署插件 hexo主题安装(下面安装的是next主题) 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 测试是否成功部署 123$ hexo clean //清理缓存$ hexo g //生成静态网页$ hexo s //开启服务 浏览器输入http://localhost:4000看是否有界面显示,有就表示部署成功! GitHub环境设置 注册一个GitHub账号 新建一个仓库(New repository),仓库命名格式必须为GitHub用户名.github.io 新建仓库时选择公共的(默认是选中的) public 创建好后,进入设置(settings),选择一个主题(Choose a theme)设置完成GitHub与hexo关联 设置Git的user name和email：(第一次配置的话) 12$ git config --global user.name &quot;GitHub用户名&quot;$ git config --global user.email &quot;GitHub注册邮箱地址&quot; 给本地生成SSH-KEY秘钥 1$ ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot; 验证SSH-KEY秘钥是否成功 1$ ssh -T git@github.com //输入此指令后选择yes,然后一直回车.有access字样表示OK了 生成的秘钥默认存在C:\Users\Administrator\.ssh中的id_rsa.pub文件中,以记事本打开添加到GitHub中去.(怎么添加自行百度) 配置Deployment站点配置文件_config.yml(在blog根目录下),打开找到Deployment修改如下:1234deploy: type: git repository: git@github.com:GitHub用户名/GitHub用户名.github.io.git branch: master 进阶(更换电脑或更换系统下继续更新博客)前提 现在已经在一台电脑上搭建好hexo，并且已经部署到github pages，可以成功的发布博客新建分支提交原始文件 初始化在本地博客根目录输入git init，为整个hexo目录初始化git环境 添加远程库将本地与github上的仓库建立关联 1$ git remote add origin git@github.com:GitHub用户名/GitHub用户名.github.io.git 新建分支hexo并切换到hexo分支 1$ git checkout -b hexo 将hexo生成网站原始的文件提交到hexo分支 12$ git add -A$ git commit -m &quot;原始文件&quot; 将hexo分支推送到远程库 1$ git push origin hexo //现在已经成功备份到hexo分支 换系统或者换电脑之后的hexo数据恢复 配置环境首先在新环境下安装Node 、Git 将本地SSH key添加到github 最后不要忘记这两行命令 12$ git config --global user.name &quot;GitHub用户名&quot;$ git config --global user.email &quot;GitHub邮箱地址&quot; 数据恢复克隆仓库 1$ git clone https://github.com/GitHub用户名/GitHub用户名.github.io.git 切换到hexo分支 1$ git checkout hexo 安装hexo 1$ npm install -g hexo-cli 安装依赖包 1$ npm install 安装git部署插件 1$ npm install hexo-deployer-git 不需要hexo init这条指令 测试 12$ hexo g$ hexo s 将博客源文件放到hexo分支下,在hexo分支下写好新博客后执行以下操作 123$ git add .$ git commit -m &quot;源文件&quot;$ git push origin hexo 发布网站到master分支上 1$ hexo g -d 原文地址 结尾 如果要将博客源文件上传到`hexo’分支下就必须执行如下: 123$ git add .$ git commit -m &quot;源文件&quot;$ git push origin hexo 如果只是发布则执行如下: 1$ hexo g -d 可能会出现 failed to push some refs to .. 的错误 这是因为git仓库中已经有一部分代码，所以它不允许&gt;你直接把你的代码覆盖上去可以使用强推，即利用强覆盖方式用你本地的代码替&gt;&gt;代git仓库内的内容 1$ git push -f origin hexo 或者先把git的东西fetch到你本地然后merge后再push12$ git fetch$ git merge]]></content>
      <categories>
        <category>基石</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用语法收录]]></title>
    <url>%2F2017%2F04%2F27%2Fhexo%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95%2F</url>
    <content type="text"></content>
  </entry>
</search>